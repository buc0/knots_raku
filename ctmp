class FooPublic1 { has @.cells; method clone { nextwith :cells(@.cells.clone), |%_; }; method dump( Str:D $tag ) { say $tag ~ "U1 dump: " ~ self.WHICH ~ " " ~ @.cells.WHICH }; };
my $apub1 = FooPublic1.new;
$apub1.dump( "a" );
my $bpub1 = $apub1.clone;
$apub1.dump( "a" );
$bpub1.dump( "b" );
class FooPublic2 { has @.cells; method !setcells( @cells is copy ) { @.cells = @cells.deepmap(-> $c is copy { $c } ); say "U2cells: " ~ self.WHICH ~ " " ~ @.cells.WHICH; }; method clone { my $clone = callsame; $clone!setcells( @.cells ); return $clone; }; method dump( Str:D $tag ) { say $tag ~ "U2 dump: " ~ self.WHICH ~ " " ~ @.cells.WHICH }; };
my $apub2 = FooPublic2.new;
$apub2.dump( "a" );
my $bpub2 = $apub2.clone;
$apub2.dump( "a" );
$bpub2.dump( "b" );
class FooPrivate1 { has @!cells; method !setcells( @cells is copy ) { @!cells = @cells.deepmap(-> $c is copy { $c } ); say "V1cells: " ~ self.WHICH ~ " " ~ @!cells.WHICH; }; method clone { my $clone = callsame; $clone!setcells( @!cells ); return $clone; }; method dump( Str:D $tag ) { say $tag ~ "V1 dump: " ~ self.WHICH ~ " " ~ @!cells.WHICH }; };
my $apriv1 = FooPrivate1.new;
$apriv1.dump( "a" );
my $bpriv1 = $apriv1.clone;
$apriv1.dump( "a" );
$bpriv1.dump( "b" );
class FooPrivate2 { has @!cells; method !setcells( @cells is copy ) { @!cells := @cells.deepmap(-> $c is copy { $c } ); say "V2cells: " ~ self.WHICH ~ " " ~ @!cells.WHICH; }; method clone { my $clone = callsame; $clone!setcells( @!cells ); return $clone; }; method dump( Str:D $tag ) { say $tag ~ "V2 dump: " ~ self.WHICH ~ " " ~ @!cells.WHICH }; };
my $apriv2 = FooPrivate2.new;
$apriv2.dump( "a" );
my $bpriv2 = $apriv2.clone;
$apriv2.dump( "a" );
$bpriv2.dump( "b" );
